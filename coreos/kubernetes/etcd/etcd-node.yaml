heat_template_version: 2014-10-16

description: >
  etcd node

parameters:
  network:
    type: string
    description: Network to connect to. NO default value.
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  discovery_url:
    type: string
    description: URL of discovery service (e.g. generated by https://discovery.etcd.io/new?size=3)
  proxy_mode:
    type: string
    description: enable or disable etcd2 proxy mode (on/off). Default off.
    default: "off"
  server_name:
    type: string
    default: etcd
    description: Name of the resulting server
  flavor:
    type: string
    default: m1.micro
    description: Flavor to use for nodes
  security_groups:
    type: comma_delimited_list
    description: Security groups for jump host
    default: default
  coreos_reboot_strategy:
    type: string
    default: "off"
    description: Enable or disable reboot for update (best-effort|etcd-lock|reboot|off). Default off.

resources:

  etcd_cloudconfig:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - path: /opt/bin/hack-dynip-environment
            permissions: "0755"
            owner: root
            content: |
               #!/usr/bin/env bash
               # Just a hack, since $private_ipv4 does not work for some reason.
               # https://github.com/coreos/bugs/issues/67

               if ! grep -q COREOS_PUBLIC_IPV4 /etc/environment; then
                 public_address=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                 cat >> /etc/environment <<EOF
               COREOS_PUBLIC_IPV4=$public_address
               FLEET_METADATA=$fleet_metadata
               EOF
               fi
               if ! grep -q COREOS_PRIVATE_IPV4 /etc/environment; then
                 private_address=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                 cat >> /etc/environment <<EOF
               COREOS_PRIVATE_IPV4=$private_address
               ETCD_ADVERTISE_CLIENT_URLS=http://$private_address:2379
               ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$private_address:2380
               ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
               ETCD_LISTEN_PEER_URLS=http://$private_address:2380
               EOF
               fi

        coreos:
          update:
            reboot-strategy: { get_param: coreos_reboot_strategy }
          etcd2:
            # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
            # specify the initial size of your cluster with ?size=X
            discovery: { get_param: discovery_url }
            proxy: { get_param: proxy_mode }
            # multi-region and multi-cloud deployments need to use $public_ipv4
            ##advertise-client-urls: http://$private_ipv4:2379
            ##initial-advertise-peer-urls: http://$private_ipv4:2380
            # listen on both the official ports and the legacy ports
            # legacy ports can be omitted if your application doesn't depend on them
            ##listen-client-urls: http://0.0.0.0:2379
            ##listen-peer-urls: http://$private_ipv4:2380
          units:
            - name: etcd2.service
              command: start
              drop-ins:
                - name: 30-dynip.conf
                  content: |
                     [Service]
                     EnvironmentFile=/etc/environment
            - name: hack-dynip.service
              command: start
              runtime: yes
              content: |
                 [Unit]
                 Description=Setting Up IP
                 After=dbus.service
                 Before=etcd2.service
                 [Service]
                 Type=oneshot
                 ExecStart=/opt/bin/hack-dynip-environment

  etcd_server:
    type: OS::Nova::Server
    properties:
      config_drive: True # coreos may need this https://coreos.com/docs/running-coreos/platforms/openstack/
      name: { get_param: server_name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: etcd_port }
      user_data_format: RAW
      user_data: { get_resource: etcd_cloudconfig }

  etcd_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups: { get_param: security_groups }

outputs:
  server:
    description: Resulted server
    value: { get_attr: [etcd_server, show] }
  port:
    description: Network port of the resulted server
    value: { get_attr: [etcd_port, show] }
