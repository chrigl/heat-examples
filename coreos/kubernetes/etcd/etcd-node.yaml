heat_template_version: 2014-10-16

description: >
  etcd node

parameters:
  network:
    type: string
    description: Network to connect to. NO default value.
  subnet:
    type: string
    description: Subnet to connect to. NO default value.
  fixed_ip:
    type: string
    description: Fixed ip of kubernetes-master
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  discovery_url:
    type: string
    description: URL of discovery service (e.g. generated by https://discovery.etcd.io/new?size=3)
  proxy_mode:
    type: string
    description: enable or disable etcd2 proxy mode (on/off). Default off.
    default: "off"
  server_name:
    type: string
    default: etcd
    description: Name of the resulting server
  flavor:
    type: string
    default: m1.micro
    description: Flavor to use for nodes
  security_groups:
    type: comma_delimited_list
    description: Security groups for jump host
    default: default
  coreos_reboot_strategy:
    type: string
    default: "etcd-lock"
    description: Enable or disable reboot for update (best-effort|etcd-lock|reboot|off). Default off.

resources:

  etcd_cloudconfig:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        coreos:
          update:
            reboot-strategy: { get_param: coreos_reboot_strategy }
          etcd2:
            # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
            # specify the initial size of your cluster with ?size=X
            discovery: { get_param: discovery_url }
            proxy: { get_param: proxy_mode }
            # multi-region and multi-cloud deployments need to use $public_ipv4
            advertise-client-urls: http://$private_ipv4:2379
            initial-advertise-peer-urls: http://$private_ipv4:2380
            # listen on both the official ports and the legacy ports
            # legacy ports can be omitted if your application doesn't depend on them
            listen-client-urls: http://0.0.0.0:2379
            listen-peer-urls: http://$private_ipv4:2380
          locksmith:
            endpoint: http://$private_ipv4:2379
            group: etcd
            window_start: "23:00"
            window_length: 2h
          units:
            - name: etcd2.service
              command: start
              drop-ins:
                - name: 30-dynip.conf
                  content: |
                    [Service]
                    EnvironmentFile=/etc/environment
            - name: skydns.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=SkyDNS
                Requires=etcd2.service
                [Service]
                Slice=machine.slice
                EnvironmentFile=/etc/environment-skydns
                ExecStart=/usr/bin/rkt --insecure-options=image run --inherit-env --stage1-from-dir=stage1-fly.aci --net=host docker://skynetservices/skydns:2.5.3a
                KillMode=mixed
                Restart=always
                RestartSec=5
        write_files:
          - path: "/etc/environment-skydns"
            permissions: "0644"
            owner: "root"
            content: |
              ETCD_MACHINES="http://10.0.0.10:2379,http://10.0.0.11:2379,http://10.0.0.12:2379,http://10.0.0.13:2379,http://10.0.0.14:2379"
              SKYDNS_ADDR="0.0.0.0:53"
              SKYDNS_DOMAIN="machines.local"
              SKYDNS_NAMESERVERS="8.8.8.8:53,8.8.4.4:53"

  etcd_server:
    type: OS::Nova::Server
    properties:
      config_drive: False
      name: { get_param: server_name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: etcd_port }
      user_data_format: RAW
      user_data: { get_resource: etcd_cloudconfig }

  etcd_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups: { get_param: security_groups }
      fixed_ips:
        - subnet_id: { get_param: subnet }
          ip_address: { get_param: fixed_ip }

outputs:
  server:
    description: Resulted server
    value: { get_attr: [etcd_server, show] }
  port:
    description: Network port of the resulted server
    value: { get_attr: [etcd_port, show] }
