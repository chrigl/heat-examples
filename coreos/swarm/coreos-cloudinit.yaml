#cloud-config

# Just a hack, since $private_ipv4 does not work for some reason.
# https://github.com/coreos/bugs/issues/67
write_files:
  - path: /etc/profile.d/swarm.sh
    permissions: 0644
    owner: root
    content: |
      # setting up SWARM_ENDPOINT if necessary.
      # only needed on front hosts
      if systemctl status swarm-manage > /dev/null 2>&1; then
        export DOCKER_HOST=tcp://localhost:5376
      fi
  - path: /opt/bin/hack-dynip-environment
    permissions: 0755
    owner: root
    content: |
      #!/usr/bin/env bash
      # Just a hack, since $private_ipv4 does not work for some reason.
      # https://github.com/coreos/bugs/issues/67

      public_address=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
      private_address=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
      if ! grep -q COREOS_PUBLIC_IPV4 /etc/environment; then
      cat >> /etc/environment <<EOF
      COREOS_PUBLIC_IPV4=$public_address
      EOF
      fi
      if ! grep -q COREOS_PRIVATE_IPV4 /etc/environment; then
      cat >> /etc/environment <<EOF
      COREOS_PRIVATE_IPV4=$private_address
      ETCD_ADVERTISE_CLIENT_URLS=http://$private_address:2379
      ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$private_address:2380
      ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      ETCD_LISTEN_PEER_URLS=http://$private_address:2380
      EOF
      fi
      if ! grep -q DOCKER_OPTS /etc/default/docker; then
        cat >> /etc/default/docker <<EOF
      # swarm_labels is replaced by heat-client
      DOCKER_OPTS=-H=${private_address}:2375 $swarm_labels
      EOF
      fi

coreos:
  update:
    reboot-strategy: $reboot_strategy
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    # specify the initial size of your cluster with ?size=X
    discovery: $etcd2_discovery_url
    proxy: $etcd2_proxy_mode
    # multi-region and multi-cloud deployments need to use $public_ipv4
    ##advertise-client-urls: http://$private_ipv4:2379
    ##initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    ##listen-client-urls: http://0.0.0.0:2379
    ##listen-peer-urls: http://$private_ipv4:2380
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 30-dynip.conf
          content: |
             [Service]
             EnvironmentFile=/etc/environment
    - name: hack-dynip.service
      command: start
      runtime: yes
      content: |
        [Unit]
        Description=Setting Up IP
        After=dbus.service
        Before=etcd2.service
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/hack-dynip-environment
    - name: docker.service
      command: restart
      drop-ins:
        - name: 00-listen.conf
          content: |
            [Service]
            EnvironmentFile=/etc/default/docker
    - name: swarm-agent.service
      command: start
      runtime: yes
      content: |
        [Unit]
        Description=Starting docker swarm agent
        After=docker.service hack-dynip.service
        Requires=etcd2.service docker.service hack-dynip.service
        [Service]
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill swarm-agent
        ExecStartPre=-/usr/bin/docker rm swarm-agent
        ExecStartPre=/usr/bin/docker pull swarm
        ExecStart=/usr/bin/docker run --rm --name swarm-agent swarm join --advertise=${COREOS_PRIVATE_IPV4}:2375 etcd://${COREOS_PRIVATE_IPV4}:2379
        ExecStop=/usr/bin/docker stop swarm-agent
    - name: swarm-manage.service
      command: $swarm_manage_command
      runtime: $swarm_manage_runtime
      content: |
        [Unit]
        Description=Starting docker swarm manage
        After=docker.service hack-dynip.service
        Requies=etcd2.service docker.service hack-dynip.service
        [Service]
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill swarm-manage
        ExecStartPre=-/usr/bin/docker rm swarm-manage
        ExecStart=/usr/bin/docker run --rm -p 5376:5376 --name swarm-manage swarm manage -H 0.0.0.0:5376 etcd://${COREOS_PRIVATE_IPV4}:2379
        ExecStop=/usr/bin/docker stop swarm-manage
