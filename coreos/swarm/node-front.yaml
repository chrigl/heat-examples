heat_template_version: 2014-10-16

description: >
  front host

parameters:
  network:
    type: string
    description: Network to connect to. NO default value.
  public_net_id:
    type: string
    description: ID of public network for which floating IP addresses will be allocated
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  discovery_url:
    type: string
    description: URL of discovery service (e.g. generated by https://discovery.etcd.io/new?size=3)
  proxy_mode:
    type: string
    description: enable or disable etcd2 proxy mode (on/off). Default on.
    default: "on"
  server_name:
    type: string
    default: front
    description: Name of the resulting server
  flavor:
    type: string
    default: m1.tiny
    description: Flavor to use for nodes
  security_groups:
    type: comma_delimited_list
    description: Security groups for front host
    default: default
  coreos_reboot_strategy:
    type: string
    default: "on"
    description: Enable or disable reboot for update (on/off). Default on.

resources:

  fronthost:
    type: OS::Nova::Server
    properties:
      config_drive: True # coreos may need this https://coreos.com/docs/running-coreos/platforms/openstack/
      name: { get_param: server_name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: fronthost_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: coreos-cloudinit.yaml }
          params:
            $etcd2_discovery_url: { get_param: discovery_url }
            $etcd2_proxy_mode: { get_param: proxy_mode }
            $reboot_strategy: { get_param: coreos_reboot_strategy }
            $swarm_manage_command: start
            $swarm_manage_runtime: "yes"
            $swarm_labels: --label kind=frontend

  fronthost_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups: { get_param: security_groups }

  fronthost_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: fronthost_port }

outputs:
  server:
    description: Resulted server
    value: { get_attr: [fronthost, show] }
  port:
    description: Network Port of the resulted server
    value: { get_attr: [fronthost_port, show] }
  floating_ip:
    description: Floating ip of the resulted server
    value: { get_attr: [fronthost_floating_ip, show] }
